String:
     //构造字符串对象
        //为字符串字面值构造对象
        String string="a#a#a";
        String string1=new String("aaa");
        //为字符数组构造对象，new String(char[] c)
        char[] chars={'a','b'};
        String string2=new String(chars);
 ////////////////////////////////////////////////////////////////////////////////////////
 
        //替换与拆分字符串。
        // replace方法返回一个新字符串，原始字符串不改变
        string=string.replace('a','b');
        string=string.replaceFirst(string2,"n");
        string=string.replaceAll("a","b");
        
        // temp={a,a,a},以’#‘为分隔符
        String[] temp=string.split("#");
///////////////////////////////////////////////////////////////////////////////////////////

        //字符串->字符数组，数组的值为字符串中的每个字符
        char[] c=string.toCharArray();//char[] toCharArray()
//////////////////////////////////////////////////////////////////////////////////////////

        //字符，数值->字符串,valueOf()静态方法
        //String.valueOf(char/char[]/double/float/int/long/boolean),也可将字符串与字符/数值用‘+’连接，构成字符串
        Boolean i=false;
        String  temp1=String.valueOf(i);//temp1:"false"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //获取字符串长度
            string.length();
            
        //连接字符串与字符串
            string=string.concat("sss");//String concat(String str)
            string=string+"11";
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            
        //字符串格式变换：
            string=string1.trim();                                   //String trim(),返回一个新的字符串对象，去掉两边的空白字符
            string=string1.toLowerCase();                           //String toLowerCase()
            string=string1.toUpperCase();                          //String toUpperCase()
            string=String.format("%7.2f%6d%-4s",2.31,6,"hello");  //static String format(String format, Object... args),语法与printf类似,
            System.out.print(string);                            // 返回“   2.31     6hello”
        //System.out.printf(format,item1,item2,...)<->System.out.printf(String.format(format,item1,item2,...))
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //字符串比较
        string.equals("uuu");                 //boolean equals(Object anObject),相等返回true
        string.equalsIgnoreCase("UUU");      //boolean equalsIgnoreCase(String anotherString)
        string.compareTo("abg");            //int compareTo(String anotherString)，大于->正数，小于->负数，等于->0，
                                           //eg.if string="abc",string.compare("abg")返回-4，返回首个不同字符的unicode码差值
        string.compareToIgnoreCase("uu"); // int compareToIgnoreCase(String anotherString)
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////       
        
        //字符串查找
        string.startsWith("a");    //boolean startsWith(String prefix)，若以特定前缀开始，返回true
        string.endsWith("a");     //boolean endsWith(String suffix)，若以特定后缀结束，返回true
        string.contains("lll");  //boolean contains(CharSequence s)包含返回true
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //获取子字符串
        //返回子字符串的下标，没有返回-1；
        string.indexOf("aaa");     //int indexOf(String str, int fromIndex)[从下标fromindex开始查找第一个匹配的字符串],int indexOf(String str)
        string.lastIndexOf("aaa");//int lastIndexOf(String str)【返回最后一个str的下标】，
                                 //int lastIndexOf(String str, int fromIndex)【查找formindex之前最后一个匹配的子字符串】
        //返回一个子字符串，
        string.substring(1);//String substring(int beginIndex)；String substring(int beginIndex, int endIndex)
                            //返回下标beginindex开始到字符串结尾；返回beginindex到endindex-1的子字符串 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
        
        //获取字符串中的字符
        //返回下标，没有返回-1
        string.indexOf('a');      //int indexOf(int ch); int indexOf(int ch, int fromIndex)【返回fromindex开始，第一个符合ch的下标】
        string.indexOf(1);       //把查找Unicode为1的字符，ch是Unicode的int型表示
        string.lastIndexOf('l');//int lastIndexOf(int ch); int lastIndexOf(int ch, int fromIndex)；
        
        //返回字符
        string.charAt(9);//返回string下标为9的字符，char charAt(int index)
